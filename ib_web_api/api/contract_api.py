# coding: utf-8

"""
    Client Portal Web API

    Production version of the Client Portal Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ib_web_api.api_client import ApiClient


class ContractApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def iserver_contract_conid_info_get(self, conid, **kwargs):  # noqa: E501
        """Contract Info  # noqa: E501

        get contract details, you can use this to prefill your order before you submit an order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.iserver_contract_conid_info_get(conid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conid: contract id (required)
        :return: Contract
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.iserver_contract_conid_info_get_with_http_info(conid, **kwargs)  # noqa: E501
        else:
            (data) = self.iserver_contract_conid_info_get_with_http_info(conid, **kwargs)  # noqa: E501
            return data

    def iserver_contract_conid_info_get_with_http_info(self, conid, **kwargs):  # noqa: E501
        """Contract Info  # noqa: E501

        get contract details, you can use this to prefill your order before you submit an order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.iserver_contract_conid_info_get_with_http_info(conid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conid: contract id (required)
        :return: Contract
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method iserver_contract_conid_info_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conid' is set
        if ('conid' not in params or
                params['conid'] is None):
            raise ValueError("Missing the required parameter `conid` when calling `iserver_contract_conid_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conid' in params:
            path_params['conid'] = params['conid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iserver/contract/{conid}/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Contract',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def iserver_secdef_search_post(self, symbol, **kwargs):  # noqa: E501
        """Search by symbol or name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.iserver_secdef_search_post(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Symbol symbol: symbol or name to be searched (required)
        :return: list[InlineResponse2008]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.iserver_secdef_search_post_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.iserver_secdef_search_post_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def iserver_secdef_search_post_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Search by symbol or name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.iserver_secdef_search_post_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Symbol symbol: symbol or name to be searched (required)
        :return: list[InlineResponse2008]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method iserver_secdef_search_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `iserver_secdef_search_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'symbol' in params:
            body_params = params['symbol']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iserver/secdef/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2008]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trsrv_futures_get(self, symbols, **kwargs):  # noqa: E501
        """Security Futures by Symbol  # noqa: E501

        Returns a list of non-expired future contracts for given symbol(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trsrv_futures_get(symbols, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbols: list of case-sensitive symbols separated by comma (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trsrv_futures_get_with_http_info(symbols, **kwargs)  # noqa: E501
        else:
            (data) = self.trsrv_futures_get_with_http_info(symbols, **kwargs)  # noqa: E501
            return data

    def trsrv_futures_get_with_http_info(self, symbols, **kwargs):  # noqa: E501
        """Security Futures by Symbol  # noqa: E501

        Returns a list of non-expired future contracts for given symbol(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trsrv_futures_get_with_http_info(symbols, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbols: list of case-sensitive symbols separated by comma (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbols']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trsrv_futures_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbols' is set
        if ('symbols' not in params or
                params['symbols'] is None):
            raise ValueError("Missing the required parameter `symbols` when calling `trsrv_futures_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbols' in params:
            query_params.append(('symbols', params['symbols']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trsrv/futures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trsrv_secdef_post(self, body, **kwargs):  # noqa: E501
        """Secdef by Conid  # noqa: E501

        Returns a list of security definitions for the given conids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trsrv_secdef_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body5 body: request body (required)
        :return: Secdef
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trsrv_secdef_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.trsrv_secdef_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def trsrv_secdef_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Secdef by Conid  # noqa: E501

        Returns a list of security definitions for the given conids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trsrv_secdef_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body5 body: request body (required)
        :return: Secdef
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trsrv_secdef_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `trsrv_secdef_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/trsrv/secdef', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Secdef',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
