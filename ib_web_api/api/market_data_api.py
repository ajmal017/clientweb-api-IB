# coding: utf-8

"""
    Client Portal Web API

    Production version of the Client Portal Web API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ib_web_api.api_client import ApiClient


class MarketDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def iserver_marketdata_history_get(self, conid, period, **kwargs):  # noqa: E501
        """Market Data History  # noqa: E501

        Get history of market Data for the given conid, length of data is controlled by period and bar. e.g. 1y period with bar =1w returns 52 data points  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.iserver_marketdata_history_get(conid, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conid: contract id (required)
        :param str period: time period-- 1d,1w,1m,1y (required)
        :param str bar: possible value-- 5min,1h,1w
        :return: HistoryData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.iserver_marketdata_history_get_with_http_info(conid, period, **kwargs)  # noqa: E501
        else:
            (data) = self.iserver_marketdata_history_get_with_http_info(conid, period, **kwargs)  # noqa: E501
            return data

    def iserver_marketdata_history_get_with_http_info(self, conid, period, **kwargs):  # noqa: E501
        """Market Data History  # noqa: E501

        Get history of market Data for the given conid, length of data is controlled by period and bar. e.g. 1y period with bar =1w returns 52 data points  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.iserver_marketdata_history_get_with_http_info(conid, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conid: contract id (required)
        :param str period: time period-- 1d,1w,1m,1y (required)
        :param str bar: possible value-- 5min,1h,1w
        :return: HistoryData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conid', 'period', 'bar']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method iserver_marketdata_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conid' is set
        if ('conid' not in params or
                params['conid'] is None):
            raise ValueError("Missing the required parameter `conid` when calling `iserver_marketdata_history_get`")  # noqa: E501
        # verify the required parameter 'period' is set
        if ('period' not in params or
                params['period'] is None):
            raise ValueError("Missing the required parameter `period` when calling `iserver_marketdata_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'conid' in params:
            query_params.append(('conid', params['conid']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501
        if 'bar' in params:
            query_params.append(('bar', params['bar']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iserver/marketdata/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HistoryData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def iserver_marketdata_snapshot_get(self, conids, **kwargs):  # noqa: E501
        """Market Data  # noqa: E501

        Get Market Data for the given conid(s). The end-point will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts should be called prior to /iserver/marketdata/snapshot. To receive all available fields the /snapshot endpoint will need to be called several times.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.iserver_marketdata_snapshot_get(conids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conids: list of conids separated by comma (required)
        :param int since: time period since which updates are required. uses epoch time with milliseconds.
        :param str fields: list of fields separated by comma
        :return: list[InlineResponse2007]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.iserver_marketdata_snapshot_get_with_http_info(conids, **kwargs)  # noqa: E501
        else:
            (data) = self.iserver_marketdata_snapshot_get_with_http_info(conids, **kwargs)  # noqa: E501
            return data

    def iserver_marketdata_snapshot_get_with_http_info(self, conids, **kwargs):  # noqa: E501
        """Market Data  # noqa: E501

        Get Market Data for the given conid(s). The end-point will return by default bid, ask, last, change, change pct, close, listing exchange. See response fields for a list of available fields that can be request via fields argument. The endpoint /iserver/accounts should be called prior to /iserver/marketdata/snapshot. To receive all available fields the /snapshot endpoint will need to be called several times.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.iserver_marketdata_snapshot_get_with_http_info(conids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conids: list of conids separated by comma (required)
        :param int since: time period since which updates are required. uses epoch time with milliseconds.
        :param str fields: list of fields separated by comma
        :return: list[InlineResponse2007]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conids', 'since', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method iserver_marketdata_snapshot_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conids' is set
        if ('conids' not in params or
                params['conids'] is None):
            raise ValueError("Missing the required parameter `conids` when calling `iserver_marketdata_snapshot_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'conids' in params:
            query_params.append(('conids', params['conids']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iserver/marketdata/snapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse2007]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
